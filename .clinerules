 You are an expert in Elixir, Phoenix, PostgreSQL, JavaScript, TypeScript, React.

# Tools

- Use the `hex-docs` MCP tool to information about the library usage, function or module.
- Prefer command `git ls-files -z | xargs -0 sed -i -e 's/FROM_A/TO_B/g'` batch renaming.
- Prefer command `mkdir -p some_folder && git mv old_file some_folder/new_files` + edtiting then fully sending the whole file again when reorganizing the file structure.

# Elixir and Phoenix Usage

- When adding new dependencies, always use `mix hex.info <package>` to find the latest version to use.
- In controllers, use `assign_prop/3` to assign props to the Inertia page and then `render_inertia/2` to render Inertia pages.
- When generating migrations, use `mix ecto.gen.migration <name>`
- Use plural form for context modules (e.g., "Users" for users table)
- Use singular form for schema modules (e.g., "User" for users table)
- Context files are usually inside a folder named after the resource (e.g., lib/my_app/users.ex)
- Schema files are usually inside a folder named after the resource (e.g., lib/my_app/users/user.ex)
- Prefer keyword-based queries over pipe-based queries
  - For example, use `from(u in User, where: u.age > 18, select: u)` over `User |> where(age: 18) |> select([u], u)`
- Use `dbg/1` to debug code. Add `|> dbg` entries around the error area to narrow the source

## Types

- For all data structures exchanged via API endpoints, define them using Ecto.EmbeddedSchema and Ecto.Changeset for robust runtime casting and validation of incoming data.
- Alongside every Ecto.EmbeddedSchema definition, meticulously write corresponding Elixir typespecs (@type t :: %__MODULE__{...}).
- Define all core internal application data structures using TypedStruct.
- When needed, implement explicit transformation functions to map validated data between external-facing Ecto.EmbeddedSchema and internal TypedStruct representations, maintaining a clear boundary.

## Workflows

- Use [Reactor](https://hexdocs.pm/reactor/getting-started-with-reactor.html) to create composable workflows like LLM agent/worflows or other workflows that forms process DAG.
- Split each reactor and step into its own module. Organize them into into non-hierarchical folders `steps` and `reactors` (for better composability)
- Use the DSL behaviors to create reactor and steps. Always define the inputs of the reactors, and precisely define the arguments used by each steps.
- Always wrap the step `run` implementation with `try do .. rescue` logging the stacktrace of unexpected errors and reraising it.
- RunStepError indicates an error within the implemented `run`  function in that step, sprikle `dbg` around to narrow down the source of the error
- Use the context to pass read-only data through the steps

## LLM

- Use [Instructor](https://hexdocs.pm/instructor/Instructor.html) for get structured outputs from LLMs
- Alawys use Ecto.Schema and use Instructor to defined the structured outputs

# React Usage

- Pages are in assets/js/pages. Use default export for pages.
- Components are in assets/js/components. Use named exports for components.
- Utils are in assets/js/lib.
- Use absolute paths for local imports using `@/`
- Always create the mobile version of the component along with the desktop version.
- Use kebab-case for file names.
- If the page or component uses a type for a resource from the database, like users or courses, create the type in the assets/js/types folder.
- Prefer types over interfaces.

# Testing

- Using mimic to provide mocking if need, but avoid mocking unless really needed.
- Always mock external APIs and assume the test environment runs in an isolated sandbox

# General Usage

- Use the `mix test && mix check` command after generating lots of changes to check the Elixir and React code for errors and code quality. If you encounter format errors, use `mix format` to fix them.
- If any of my requests are not clear, ask me to clarify.
- If you have better suggestions, feel free to suggest them.
